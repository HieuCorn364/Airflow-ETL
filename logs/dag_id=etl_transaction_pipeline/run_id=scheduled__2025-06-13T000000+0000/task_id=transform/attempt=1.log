{"timestamp":"2025-06-13T03:29:40.143144","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-13T03:29:40.143534","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-13T03:29:40.170350Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:40.170722Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:40.170986Z","level":"info","event":"Current task name:transform","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:40.171151Z","level":"info","event":"Dag name:etl_transaction_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.186839","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"ValueError","exc_value":"time data \"05-08-23\" doesn't match format \"%m/%d/%Y\", at position 3. You might want to try:\n    - passing `format` if your strings have a consistent format;\n    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;\n    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":838,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1130,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":408,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":212,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":235,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/etl_dag.py","lineno":16,"name":"transform"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":1108,"name":"to_datetime"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":254,"name":"_maybe_cache"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":488,"name":"_convert_listlike_datetimes"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pandas/core/tools/datetimes.py","lineno":519,"name":"_array_strptime_with_fallback"},{"filename":"/opt/airflow/strptime.pyx","lineno":534,"name":"pandas._libs.tslibs.strptime.array_strptime"},{"filename":"/opt/airflow/strptime.pyx","lineno":355,"name":"pandas._libs.tslibs.strptime.array_strptime"}]}]}
{"timestamp":"2025-06-13T03:29:41.203790Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.204264Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.204680Z","level":"info","event":"Task:<Task(PythonOperator): transform>","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.205096Z","level":"info","event":"Failure caused by time data \"05-08-23\" doesn't match format \"%m/%d/%Y\", at position 3. You might want to try:","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.205519Z","level":"info","event":"    - passing `format` if your strings have a consistent format;","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.205866Z","level":"info","event":"    - passing `format='ISO8601'` if your strings are all ISO8601 but not necessarily in exactly the same format;","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T03:29:41.206235Z","level":"info","event":"    - passing `format='mixed'`, and the format will be inferred for each element individually. You might want to use `dayfirst` alongside this.","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:45.034732","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-06-13T04:19:45.035193","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/etl_dag.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-06-13T04:19:45.983074Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:45.983725Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:45.984179Z","level":"info","event":"Current task name:transform","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:45.984540Z","level":"info","event":"Dag name:etl_transaction_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:48.676182Z","level":"info","event":"Transformed data successfully","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:48.703613","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-06-13T04:19:48.729484Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:48.729933Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-06-13T04:19:48.730376Z","level":"info","event":"Task operator:<Task(PythonOperator): transform>","chan":"stdout","logger":"task"}
